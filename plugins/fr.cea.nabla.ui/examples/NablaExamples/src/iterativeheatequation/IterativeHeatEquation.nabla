/*******************************************************************************
 * Copyright (c) 2020 CEA
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * SPDX-License-Identifier: EPL-2.0
 * Contributors: see AUTHORS file
 *******************************************************************************/
module IterativeHeatEquation;

with Math.*;

itemtypes { node, cell, face }

set nodes: → {node};
set cells: → {cell};
set faces: → {face};
set neighbourCells: cell → {cell};
set nodesOfFace: face → {node};
set cellsOfFace: face → {cell};
set nodesOfCell: cell → {node};
item commonFace: cell × cell → face;

def check: ℾ → ℾ, (a) → if (a) return true; else exit "Assertion failed";

option u0 = 1.0;
option vectOne = ℝ[2](1.0);

// Mesh options
option X_LENGTH = 2.0;
option Y_LENGTH = 2.0;
option X_EDGE_ELEMS = 40;
option Y_EDGE_ELEMS = 40;
option X_EDGE_LENGTH = X_LENGTH / X_EDGE_ELEMS;
option Y_EDGE_LENGTH = Y_LENGTH / Y_EDGE_ELEMS;

// Simulation options
option stopTime = 0.1;
option maxIterations = 500000000;
option maxIterationsK = 1000;
option ε =  1.0e-8;

let t=0.0;
let δt=0.001;
ℝ[2] X{nodes}, Xc{cells}; // Position of nodes and cells center of gravity 
ℝ xc{cells}, yc{cells}; // Abscissa and ordinate of cells center of gravity so they can be plotted in vtk file
ℝ u{cells}; // Temperature
ℝ V{cells}; // Volume of cells
ℝ D{cells}; // Cell centered conductivity
ℝ faceLength{faces}, faceConductivity{faces};
ℝ α{cells, cells};
ℝ residual;

iterate	n while (t^{n+1} < stopTime && n+1 < maxIterations),
		k while (residual > ε && check(k+1 < maxIterationsK));

InitXc: ∀c∈cells(), Xc{c} = 0.25 * ∑{p∈nodesOfCell(c)}(X{p});  // Only valid on parallelograms

InitXcAndYc: ∀c∈cells(), {
	xc{c} = Xc{c}[0]; 
	yc{c} = Xc{c}[1];
}

InitU: ∀c∈cells(),
	if (norm(Xc{c} - vectOne) < 0.5)
		u^{n}{c} = u0;
	else 
		u^{n}{c} = 0.0; // Initial circle in the center with value u0

InitD: ∀c∈cells(), D{c} = 1.0;

computeDeltaTn: δt = Min{c∈cells()}(X_EDGE_LENGTH*Y_EDGE_LENGTH/D{c}) * 0.1;

ComputeV: ∀j∈cells(), V{j} = 0.5 * ∑{p∈nodesOfCell(j)}(det(X{p}, X{p+1}));
ComputeFaceLength: ∀f∈faces(), faceLength{f} = 0.5 * ∑{p∈nodesOfFace(f)}(norm(X{p} - X{p+1}));
ComputeFaceConductivity: ∀f∈faces(), faceConductivity{f} = 2.0 * ∏{c1∈cellsOfFace(f)}(D{c1}) / ∑{c2∈cellsOfFace(f)}(D{c2});

// Assembling of the diffusion matrix
computeAlphaCoeff: ∀c∈cells(), {
	let αDiag = 0.0;
	∀d∈neighbourCells(c), f=commonFace(c,d), {
		let αExtraDiag = δt / V{c} * (faceLength{f} *  faceConductivity{f}) / norm(Xc{c} - Xc{d});
		α{c, d} = αExtraDiag;
		αDiag = αDiag + αExtraDiag;
	}
	α{c, c} = -αDiag;
}
UpdateU: ∀c∈cells(), u^{n+1, k+1}{c} = u^{n}{c} + α{c, c} * u^{n+1, k}{c} + ∑{d∈neighbourCells(c)} (α{c, d} * u^{n+1, k}{d});
ComputeResidual: residual = Max{j ∈ cells()}(abs(u^{n+1,k+1}{j} - u^{n+1,k}{j}));
ComputeTn: t^{n+1} = t^{n} + δt;
