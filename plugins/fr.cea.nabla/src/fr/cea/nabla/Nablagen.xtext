/*******************************************************************************
 * Copyright (c) 2020 CEA
 * This program and the accompanying materials are made available under the 
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * SPDX-License-Identifier: EPL-2.0
 * Contributors: see AUTHORS file
 *******************************************************************************/

grammar fr.cea.nabla.Nablagen 
with fr.cea.nabla.Nabla 

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.cea.fr/nabla/Nabla" as nabla

generate nablagen "http://www.cea.fr/nabla/Nablagen"

NablagenRoot:
	(writeIR?='[WriteIr]')?
	'Application' name=ID ';'
	mainModule = MainModule
	additionalModules += AdditionalModule*
	(vtkOutput = VtkOutput)?
	(levelDB = LevelDB)?
	targets += Target*;

NablagenModule: MainModule | AdditionalModule;

MainModule:
	'MainModule' type=[nabla::NablaModule] name=ID
	'{'
		'meshClassName' '=' meshClassName=STRING ';'
		'nodeCoord' '=' nodeCoord=[nabla::ConnectivityVar]';'
		'time' '=' time=[nabla::SimpleVar]';'
		'timeStep' '=' timeStep=[nabla::SimpleVar]';'
		// The two following variables are just needed for the C++ display (progression bar)
		('iterationMax' '=' iterationMax=[nabla::SimpleVar] ';'
		'timeMax' '=' timeMax=[nabla::SimpleVar] ';')?
	'}';

AdditionalModule:
	'AdditionalModule' type=[nabla::NablaModule] name=ID
	'{'
		varLinks += VarLink*
	'}';

VarLink:
	additionalModule=[AdditionalModule] '.' additionalVariable=[nabla::Var] '=' mainModule=[MainModule] '.' mainVariable=[nabla::Var] ';';

VtkOutput:
	'VtkOutput'
	'{'
		'periodReferenceVariable' '=' periodReferenceModule=[MainModule] '.'periodReferenceVar=[nabla::ArgOrVar] ';'
		'outputVariables' '=' vars += OutputVar (',' vars += OutputVar)* ';'
	'}';

OutputVar:
	moduleRef=[NablagenModule] '.' varRef=[nabla::ConnectivityVar] 'as' varName=STRING;

LevelDB:
	'LevelDB'
	'{'
		'levelDBPath' '=' levelDBPath = STRING ';'
	'}';

Target: Java | Cpp;
Cpp: CppSequential | CppStlThread | CppOpenMP | CppKokkos | CppKokkosTeamThread;

Java: 'Java'
'{'
	'outputPath' '=' outputDir=STRING ';'
'}';

CppSequential: 'CppSequential'
'{'
	'outputPath' '=' outputDir=STRING ';'
	'compiler' '=' compiler=CppCompiler ';'
	('compilerPath' '=' compilerPath = STRING ';')?
'}';

CppStlThread: 'StlThread'
'{'
	'outputPath' '=' outputDir=STRING ';'
	'compiler' '=' compiler=CppCompiler ';'
	('compilerPath' '=' compilerPath = STRING ';')?
'}';

CppOpenMP: 'OpenMP'
'{'
	'outputPath' '=' outputDir=STRING ';'
	'compiler' '=' compiler=CppCompiler ';'
	('compilerPath' '=' compilerPath = STRING ';')?
'}';

CppKokkos: 'Kokkos'
'{'
	'outputPath' '=' outputDir=STRING ';'
	'kokkosPath' '=' kokkosPath = STRING ';'
	'compiler' '=' compiler=CppCompiler ';'
	('compilerPath' '=' compilerPath = STRING ';')?
'}';

CppKokkosTeamThread: 'KokkosTeamThread'
'{'
	'outputPath' '=' outputDir=STRING ';'
	'kokkosPath' '=' kokkosPath = STRING ';'
	'compiler' '=' compiler=CppCompiler ';'
	('compilerPath' '=' compilerPath = STRING ';')?
'}';

enum CppCompiler: GNU | LLVM;
