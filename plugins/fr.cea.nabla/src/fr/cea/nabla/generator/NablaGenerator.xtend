/*******************************************************************************
 * Copyright (c) 2020 CEA
 * This program and the accompanying materials are made available under the 
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * SPDX-License-Identifier: EPL-2.0
 * Contributors: see AUTHORS file
 *******************************************************************************/
package fr.cea.nabla.generator

import com.google.inject.Inject
import fr.cea.nabla.generator.ir.Nabla2Ir
import fr.cea.nabla.ir.transformers.CompositeTransformationStep
import fr.cea.nabla.ir.transformers.FillJobHLTs
import fr.cea.nabla.ir.transformers.ReplaceReductions
import fr.cea.nabla.nabla.NablaModule
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext

import static extension fr.cea.nabla.LatexLabelServices.*

class NablaGenerator extends AbstractGenerator
{
	@Inject Nabla2Ir nabla2Ir
	@Inject NablaGeneratorMessageDispatcher dispatcher
	@Inject IrModuleTransformer transformer
	val traceNotifier = [String msg | dispatcher.post(msg)]

	override doGenerate(Resource input, IFileSystemAccess2 fsa, IGeneratorContext context)
	{
		try
		{
			val module = input.contents.filter(NablaModule).head
			dispatcher.post('Model size (eAllContents.size): ' + module.eAllContents.size + '\n')

			if (!module.jobs.empty)
			{
				val latexFileName = module.name.toLowerCase + '/' + module.name + '.tex'
				dispatcher.post('Generating LaTeX: ' + latexFileName + '\n')
				fsa.generateFile(latexFileName, module.latexContent)

				// Nabla -> IR
				dispatcher.post('Nabla -> IR\n')
				val irModule = nabla2Ir.toIrModule(module)

				// IR -> IR
				transformer.transformIr(irTransformation, irModule, traceNotifier)
				dispatcher.post(irModule)
			}
		}
		catch(Exception e)
		{
			dispatcher.post('\n***' + e.class.name + ': ' + e.message + '\n')
			if (e.stackTrace !== null && !e.stackTrace.empty)
			{
				val s = e.stackTrace.head
				dispatcher.post('at ' + s.className + '.' + s.methodName + '(' + s.fileName + ':' + s.lineNumber + ')\n')
			}
			throw(e)
		}
	}

	private def getIrTransformation()
	{
		val description = 'Minimal IR->IR transformations to check job cycles'
		new CompositeTransformationStep(description, #[new ReplaceReductions(false), new FillJobHLTs])
	}

	private def getLatexContent(NablaModule m)
	'''
		\documentclass[11pt]{article}

		\use package{fontspec}
		\use package{geometry}
		\geometry{landscape}

		\title{Nabla Module «m.name»}
		\author{Generated by the NabLab environment}

		\begin{document}
		\maketitle

		«FOR j : m.jobs»
		«val latexContent = j.latex»
		«IF !latexContent.nullOrEmpty»

		\section{«j.name»}
		$«latexContent»$

		«ENDIF»
		«ENDFOR»
		\end{document}
	'''
}
